I"G<p>Given a string, return its encoding defined as follows:</p>

<p>First, the string is divided into the least possible number of disjoint <strong>substrings</strong> consisting of identical characters
for example, <code class="highlighter-rouge">"aabbbc"</code> is divided into <code class="highlighter-rouge">["aa", "bbb", "c"]</code>
Next, each substring with length greater than one is replaced with a concatenation of its length and the repeating character
for example, substring <code class="highlighter-rouge">"bbb"</code> is replaced by <code class="highlighter-rouge">"3b"</code>
Finally, all the new strings are concatenated together in the same order and a new string is returned.</p>

<h4 id="substring">SUBSTRING</h4>

<p>A <strong>substring</strong> of a string <code class="highlighter-rouge">S</code> is another string <code class="highlighter-rouge">S'</code> that occurs in <code class="highlighter-rouge">S</code>. For example, <code class="highlighter-rouge">"Fights"</code> is a substring of <code class="highlighter-rouge">"CodeFights"</code>, but <code class="highlighter-rouge">"CoFi"</code> isn’t.</p>

<p><strong>Example</strong></p>

<p>For <code class="highlighter-rouge">s = "aabbbc"</code>, the output should be <code class="highlighter-rouge">lineEncoding(s) = "2a3bc"</code>.</p>

<p><strong>Input/Output</strong></p>

<ul>
  <li>[time limit] 4000ms (py)</li>
  <li>[input] string s (String consisting of lowercase English letters.)</li>
</ul>

<p><em>Constraints:</em> <code class="highlighter-rouge">4 ≤ s.length ≤ 15.</code></p>

<ul>
  <li>[output] string (Encoded version of s.)</li>
</ul>

<p><strong>Solution:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">re</span>
<span class="k">def</span> <span class="nf">lineEncoding</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">grub</span> <span class="o">=</span> <span class="p">[</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="s">r"(\w)\1*"</span><span class="p">,</span> <span class="n">s</span> <span class="p">)]</span>
    <span class="n">numb</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">out</span>  <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">grub</span><span class="p">:</span>
        <span class="n">numb</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">out</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">grub</span><span class="p">[</span><span class="n">numb</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">grub</span><span class="p">[</span><span class="n">numb</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">i</span><span class="p">))</span><span class="o">+</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">out</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">return</span> <span class="s">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Result Tests:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span>
<span class="n">s</span> <span class="o">=</span> <span class="s">"aabbbc"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">lineEncoding</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="s">"2a3bc"</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"abbcabb"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">lineEncoding</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="s">"a2bca2b"</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"abcd"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">lineEncoding</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="s">"abcd"</span>
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>
:ET